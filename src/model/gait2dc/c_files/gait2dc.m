%> @file c_files/gait2dc.m
%> @brief Matlab script documenting the use of the MEX function gait2dc.mex32
%>
%> This file documents the use of the MEX function gait2dc.mex32. The musculoskeletal model is documented in the file <a href="../mainpage/gait2dc_reference.htm">gait2dc_reference</a>. The MEX function can be used to perform several functions with the model.
%> \par Size of the model
%>  Label     |     Description
%> -----------|---------------
%>	Ndof      |     Number of kinematic degrees of freedom (is 9 for this model)
%>	Nmuscles  |     Number of muscles (16)
%>  Ncontacts |		Number of contact points defined in the XLS file
%>  Nstates	  |		Number of state variables: 2*Ndof * 2*Nmuscles + 4*Ncontacts
%>	NRstick	  |		Number of right side stick figure points: 5 + Ncontacts (trunk, hip, Rknee, Rankle, Right contact points, and Rankle again)
%>	NLstick	  |		Number of left side stick figure points: 4 + Ncontacts (hip, Lknee, Lankle, Left contact points, and Lankle again)
%>
%>
%>\n
%> The MEX function can be used in several ways.
%>
%> \code
%> par = readxls('gait2dc_par.xls);
%> [xneutral] = gait2d('Initialize', par)
%> \endcode
%> This initializes the model with a set of parameters.  This is required before anything is
%> done with the model.  The \p par matrix can be obtained by reading an Excel
%> file. The Excel file also contains labels to facilitate human reading and editing.
%>	@param par				Matrix with model parameters, formatted using gait2dc_par.xls \n
%>
%>	@retval xneutral		Model state vector (Nstates x 1) for a neutral state where the model is in free fall with feet not quite touching the ground, but otherwise close to static equilibrium.
%>
%> \n 
%> 
%> \code
%>[f, dfdx, dfdxdot, dfdu, dfdM] = gait2dc('Dynamics',x,xdot,u,M)
%>\endcode
%>Implicit differential equation for 2D musculoskeletal model : f(x,dx/dt,u,M) = 0
%>	@param x			State of the model (Nstates x 1)\n
%>  @param xdot		State derivatives (Nstates x 1)\n
%>  @param u			Neural excitations for the muscles (Nmuscles x 1)\n
%>	@param M			(optional) Extra joint moments (Njoints x 1), for instance from prosthetic device\n
%>
%>	@retval f               Dynamic residuals (Nstates x 1), wil be zero when inputs satisfy system dynamics
%>	@retval dfdx            (optional) Jacobian matrix df/dx (Nstates x Nstates)
%>	@retval dfdxdot         (optional) Jacobian matrix df/dxdot (Nstates x Nstates)
%>	@retval dfdu            (optional) Jacobian matrix df/du (Nstates x Nmuscles)
%>  @retval dfdM           (optional) Jacobian matrix df/dM (Nstates x Njoints)
%>
%> The last four outputs are optional and some computation time is saved if you do 
%> not request all of them.
%>
%> \n 
%> \code
%>[grf, dgrfdx] = gait2dc('GRF', x)
%> \endcode
%>
%> This returns the ground reaction forces for the system in state x
%>	@retval grf			6 x 1 matrix, Right Fx,Fy,Mz Left Fx,Fy,Mz
%>	@retval dgrfdx		(optional) 6 x Nstates matrix, derivatives of grf with respect to state x
%>
%> \n 
%> \code
%>[right,left,rfoot,lfoot] = gait2dc('Stick', x)
%> \endcode
%>
%> This returns data for a stick figure, for the system in state x
%>	@retval right	NL x 2 matrix, containing x and y coordinates for right side stick figure
%>	@retval left	NR x 2 matrix, containing x and y coordinates for left side stick figure
%>	@retval rfoot	[optional] NRf x 2 matrix, x and y coordinates of the right foot without deformation
%>	@retval lfoot	[optional] NLf x 2 matrix, x and y coordinates of the left foot without deformation
%>
%> \n 
%> \code
%>[forces, dFdx] = gait2dc('Muscleforces', x)
%> \endcode
%>
%> This returns muscle forces, for the system in state x
%>	@retval forces		16 x 1 column vector with muscle forces (N), in same order as muscle table in gait2d_par.xls
%>  @retval dFdx        16 x 66 matrix with the derivates of the muscle
%forces wrt the states.
%>
%> \n  
%> \code
%>[powers] = gait2dc('MuscleCEpower', x, xdot)
%> \endcode
%>
%> This returns power generated by muscle contractile elements, for the system in state x
%> xdot must be the state derivatives, such that the muscle balance equations are satisfied
%> It is up to the user to ensure that f(x,xdot)=0 when this function is used
%>	@retval powers		16 x 1 column vector with CE power output (W), in same order as muscle table in gait2d_par.xls
%>
%> \n 
%> \code
%>[moments] = gait2dc('Jointmoments', x)
%> \endcode
%>
%> This returns joint moments, for the system in state x
%>	@retval moments		6 x 1 column vector with joint moments in order: right hip, knee, ankle, left hip, knee, ankle
%>
%> \n 
%> \code
%>[par] = gait2dc('Get',name);
%> \endcode
%>
%> To extract values of model parameters.
%> The following "name" arguments are presently available, and produce these outputs
%> 	@retval 'Lceopt' 			16 x 1 vector (m), optimal contractile element (CE) length
%>  @retval 'Fmax'              16 x 1 vector (N), maximum muscle force
%>  @retval 'Total Mass'		scalar (kg), total body mass of the model
%>  @retval 'FT'                16 x 1 vector (%/100) returns the percentage of fast-twitch
%>  @retval 'Ahill'             16 x 1 vector with relative Hill constant
%>  @retval 'Gmax'              16 x 1 vector with maximum eccentric muscle
%>  @retval 'PEEslack'          16 x 1 vector with PEE slack lengths
%>  @retval 'kPEE'              16 x 1 vector with stiffness parameter of
%PEE spring
%force
%muscle fibers
%>  
%>
%> \n 
%> \code
%> gait2d('Set',name,par);
%> \endcode
%> 
%> To set values of model parameters
%> The following "name,par" arguments are presently available
%> 	@retval "'Extra Mass'" 		1x4 vector: segment, mass, X, Y Segment 0 adds mass to trunk, 1 adds the mass to each thigh, 2 is shanks, 3 feet
%>	@retval 'Lambda'			1x2 vector: LambdaX LambdaY, the smoothing parameters for the contact model.

