/**
 *
 * @file gait2dc.h
 * @brief Header file defining the data structure that holds model parameters.
 *
 * @author Antonie J. (Ton) van den Bogert
 * @date January 15, 2013
 *
 * @copyright 2009-2012 Orchard Kinetics LLC
 *
 * This file defines the data structure that holds model parameters.
 * It is needed to pass model parameters to the Autolev generated C code
 * in gait2dc_al.c
 */



#define NDOF 9		// number of kinematic degrees of freedom
#define NMOM 6		// number of joint moment inputs to equation of motion
#define NGRF 6		// number of GRF inputs to equation of motion (2D force and moment on each foot
#define NSTICK 6	// number of stick figure points generated by Autolev code
#define NFK 42		// number of forward kinematic outputs generated by Autolev: R(2x2) and p(2) for each segment

typedef struct {
	// Gravity
	double gravity;
	double slope;
	
	// Air drag
	double airdrag;		// drag coefficient, N/(m/s)^2
	double wind;		// wind speed, m/s (positive value is a tailwind)

	// Body segment parameters
	double TrunkMass, TrunkInertia, TrunkCMy;
	double ThighMass, ThighInertia, ThighCMy, ThighLen;
	double ShankMass, ShankInertia, ShankCMy, ShankLen;
	double FootMass, FootInertia, FootCMx, FootCMy;
	double bodyweight;
    
    // Other parameters	
	double MinAngle[NMOM], MaxAngle[NMOM];				// passive joint range of motion
    double JointK2[NMOM], JointD[NMOM];					// parameters for nonlinear joint stiffness model
    double JointK1[NMOM], JointPhi0[NMOM], JointB[NMOM];	// parameters for linear joint stiffness and damping
    
} param_struct;

// define struct that holds contact properties
typedef struct {
	int foot;				// Which foot it is attached to: 0=right, 1=left
	double x,y;				// Resting position on segment
	double k1,k2,a;			// Principal stiffnesses and orientation between segment and stiffness
	double kxx,kyy,kxy;		// Stiffness matrix (symmetric)
	double b;				// Damping between contact point and segment
	double c;				// Friction coefficient
	double LambdaX;			// smoothing parameter for normal force model
	double LambdaY;			// smoothing parameter for friction model
	double oldcontactmodel; // set to 1 if user wants to use old contact model
	double k,d0,bo,v0,gamma;	// the parameters of the old contact model
} contactprop;

// prototype for the Autolev C function for multibody dynamics
void gait2dc_dynamics_al(param_struct* par,
	double q[NDOF], 
	double qd[NDOF], 
	double qdd[NDOF],
	double mom[NMOM],
	double grf[NGRF],
	double Zero[NDOF],
	double dz_dq[NDOF][NDOF], 
	double dz_dqd[NDOF][NDOF],
	double dz_dqdd[NDOF][NDOF],
	double dz_dmom[NDOF][NMOM],
	double dz_dgrf[NDOF][NGRF],
	double fk[NFK],
	double dfk_dq[NFK][NDOF],
	double fkdot[NFK],
	double dfkdot_dq[NFK][NDOF]);

// prototype for the Autolev C function for forward kinematics
void gait2dc_FK_al(param_struct* par,
	double q[NDOF],
	double qd[NDOF],
	double qdd[NDOF],
	double fk[NFK],
	double dfk_dq[NFK][NDOF],
	double fkdot[NFK],
	double dfkdot_dq[NFK][NDOF]);

// prototype for the Autolev C function for stick figure
void gait2dc_stick_al(param_struct* par,
	double q[NDOF],
	double qd[NDOF],
	double qdd[NDOF],
	double fk[NFK],
	double dfk_dq[NFK][NDOF],
	double fkdot[NFK],
	double dfkdot_dq[NFK][NDOF],
	double Stick[NSTICK][2]);
	
// prototype for the Autolev C function for contact deformation
void contact_al(contactprop* contact,										// parameters for one contact point
	double fk[6], double fkdot[6], double xc[4], double xcdot[2],			// inputs for one contact point
	double f[4], double df_dfk[4][6], double df_dfkdot[4][6],
	double df_dxc[4][4], double df_dxcdot[4][2]);							// outputs

// prototype for the Autolev C function for accelerometer model
	void acc_al(param_struct* par,
	double q[NDOF],
	double qd[NDOF],
	double qdd[NDOF],
	double acc[42],
	double dacc_dq[42][NDOF],
	double dacc_dqd[42][NDOF],
	double dacc_dqdd[42][NDOF]);